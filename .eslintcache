[{"C:\\Users\\lucas\\WebstormProjects\\projects-page\\src\\index.tsx":"1","C:\\Users\\lucas\\WebstormProjects\\projects-page\\src\\reportWebVitals.ts":"2","C:\\Users\\lucas\\WebstormProjects\\projects-page\\src\\App.tsx":"3","C:\\Users\\lucas\\WebstormProjects\\projects-page\\src\\Portfolio.tsx":"4","C:\\Users\\lucas\\WebstormProjects\\Portfolio-Page\\src\\index.tsx":"5","C:\\Users\\lucas\\WebstormProjects\\Portfolio-Page\\src\\reportWebVitals.ts":"6","C:\\Users\\lucas\\WebstormProjects\\Portfolio-Page\\src\\Portfolio.tsx":"7","C:\\Users\\lucas\\WebstormProjects\\Portfolio-Page\\src\\App.tsx":"8"},{"size":498,"mtime":1610629054018,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":5635,"mtime":1610652012310,"results":"12","hashOfConfig":"10"},{"size":1659,"mtime":1610644821785,"results":"13","hashOfConfig":"10"},{"size":498,"mtime":1610629054018,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":1659,"mtime":1610644821785,"results":"17","hashOfConfig":"15"},{"size":5635,"mtime":1610652012310,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1xwkbam",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1u192rt",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\lucas\\WebstormProjects\\projects-page\\src\\index.tsx",[],["37","38"],"C:\\Users\\lucas\\WebstormProjects\\projects-page\\src\\reportWebVitals.ts",[],"C:\\Users\\lucas\\WebstormProjects\\projects-page\\src\\App.tsx",["39"],"import React, {useEffect, useState} from 'react';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport IProject from './IProject';\nimport Fuse from 'fuse.js';\nimport {faGithub} from \"@fortawesome/free-brands-svg-icons\";\nimport {faGlobe, faGraduationCap} from \"@fortawesome/free-solid-svg-icons\";\nimport './App.css'\nimport {\n    Box, Button, ButtonGroup,\n    Card,\n    CardActions,\n    CardContent,\n    createMuiTheme,\n    Grid, IconButton,\n    MuiThemeProvider,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\n\nfunction App() {\n\n    const darkTheme = createMuiTheme({\n        palette: {\n            type: 'dark',\n            background: {\n                paper: \"inherit\",\n            },\n        },\n    });\n\n    const [isLoaded, setIsLoaded] = useState<Boolean>(false);\n    const [projects, setProjects] = useState<IProject[]>([]);\n    const [searchBoxValue, setSearchBoxValue] = useState<string>(\"\");\n    const [projectsToShow, setProjectsToShow] = useState<IProject[]>([]);\n\n    // ['description', 'title', 'tags']\n    const searchOptions = {\n        keys: [\n            {\n                name: 'title',\n                weight: 1\n            },\n            {\n                name: 'tags',\n                weight: 0.7\n            },\n            {\n                name: \"description\",\n                weight: 0.3\n            }\n        ]\n    }\n\n    let performSearch = (searchTerm: string): IProject[] => {\n        if (searchTerm == \"\"){\n            console.log(\"Nothing was searched\")\n            return projects;\n        }\n\n        const fuse = new Fuse(projects, searchOptions);\n        const result = fuse.search(searchTerm)\n\n        // Results from FUSE are nested.\n        const realResult = result.map(r => r.item);\n        return realResult;\n    }\n\n    const handleSearchBox = (e: any) => {\n        setSearchBoxValue(e.target.value);\n        const result = performSearch(e.target.value);\n        setProjectsToShow(result);\n    }\n\n    useEffect(() => {\n        if (!isLoaded) {\n            fetch(\"/info.json\")\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        let formattedResult: IProject[] = [];\n                        Object.values(result).forEach(entry => {\n                            formattedResult.push(entry as IProject);\n                        })\n                        setIsLoaded(true);\n                        setProjects(formattedResult);\n                        setProjectsToShow(formattedResult);\n                        console.log(\"Loaded data\");\n                    }\n                )\n        }\n    })\n\n    let openLinkInNewTab = (link: string | undefined) => {\n        window.open(link, '_blank');\n    }\n\n    let getHTMLForProjLinks = (proj: IProject) => {\n        return (\n            <CardActions disableSpacing>\n                {proj.github ? (\n                    <IconButton onClick={() => openLinkInNewTab(proj.github)}>\n                    <FontAwesomeIcon icon={faGithub} />\n                    </IconButton>\n                    ) : null}\n                {proj.livedemo ? (\n                    <IconButton onClick={() => openLinkInNewTab(proj.livedemo)}>\n                        <FontAwesomeIcon icon={faGlobe} />\n                    </IconButton>\n                ) : null}\n                {proj.academics ? (\n                    <IconButton onClick={() => openLinkInNewTab(proj.academics)}>\n                        <FontAwesomeIcon icon={faGraduationCap} />\n                    </IconButton>\n                ) : null}\n            </CardActions>\n        )\n    }\n\n    let changeSearchTerm = (term: string) => {\n        setProjectsToShow(performSearch(term));\n        setSearchBoxValue(term);\n    }\n\n    if (!isLoaded) {\n        return (\n            <div></div>\n        );\n    } else {\n        return (\n            <div id={\"appContainer\"}>\n                <MuiThemeProvider theme={darkTheme}>\n                    <Box id={\"search\"}>\n                        <h1>My Projects</h1>\n                        <TextField id=\"standard-basic\" label=\"about\" onChange={handleSearchBox} value={searchBoxValue}/>\n                    </Box>\n\n\n            <Grid container>\n                {projectsToShow.length > 0 ? projectsToShow.map(proj => (\n                    <Grid xs={5} item id={\"projectsContainer\"}>\n                        <Card >\n                            <img src={'/images/' + proj.title + \".jpg\"} alt=\"Project\" />\n                            <CardContent>\n                                <Typography variant={\"h5\"} gutterBottom={true}>\n                                    {proj.title}\n                                </Typography>\n                                <Typography>\n                                    {proj.description}\n                                </Typography>\n                                <Typography>\n                                        <ButtonGroup size=\"small\" color=\"primary\" aria-label=\"large outlined primary button group\">\n                                            {   proj.tags.map(tag => (\n                                                <Button onClick={() => changeSearchTerm(tag)}>{tag}</Button>\n                                            ))}\n                                            </ButtonGroup>\n                                </Typography>\n                                {getHTMLForProjLinks(proj)}\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                )) : null}\n\n            </Grid>\n                </MuiThemeProvider>\n            </div>\n\n\n        );\n    }\n\n\n}\n\nexport default App;","C:\\Users\\lucas\\WebstormProjects\\projects-page\\src\\Portfolio.tsx",[],"C:\\Users\\lucas\\WebstormProjects\\Portfolio-Page\\src\\index.tsx",[],"C:\\Users\\lucas\\WebstormProjects\\Portfolio-Page\\src\\reportWebVitals.ts",[],"C:\\Users\\lucas\\WebstormProjects\\Portfolio-Page\\src\\Portfolio.tsx",[],"C:\\Users\\lucas\\WebstormProjects\\Portfolio-Page\\src\\App.tsx",["40"],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":55,"column":24,"nodeType":"47","messageId":"48","endLine":55,"endColumn":26},{"ruleId":"45","severity":1,"message":"46","line":55,"column":24,"nodeType":"47","messageId":"48","endLine":55,"endColumn":26},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]